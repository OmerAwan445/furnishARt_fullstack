generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique @db.VarChar(100)
  email       String    @unique @db.VarChar(100)
  first_name  String    @db.VarChar(100)
  last_name   String    @db.VarChar(100)
  password    String    @db.VarChar(255)
  role        Role      @default(USER)
  is_verified Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tokens      UserToken[]

  // Relation fields for specific roles
  customer    Customer?
  admin       Admin?

  @@index([role])
}

model Customer {
  id                Int           @id @default(autoincrement())
  address           String?       @db.VarChar(255)
  stripe_customer_id String?
  user_id           Int           @unique // One-to-one relation with User
  cart              Cart?
  orders            Order[]
  payments          Payment[]
  reviews           Review[]

  User User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Admin {
  id      Int  @id @default(autoincrement())
  user_id Int  @unique // One-to-one relation with User

  User User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserToken {
  id          Int       @id @default(autoincrement())
  tokenType   tokenType
  token       String
  expiry      DateTime
  user_id     Int
  updated_at  DateTime  @updatedAt
  created_at  DateTime  @default(now())

  User User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, tokenType])
}
model Cart {
  id          Int        @id @default(autoincrement())
  price       Decimal    @db.Decimal(10, 2)
  customer_id Int        @unique
  cartItems   CartItem[] 
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
}

model CartItem {
  id                Int      @id @default(autoincrement())
  quantity          Int
  furniture_item_id Int
  cart_id           Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  furniture_item FurnitureItem @relation(fields: [furniture_item_id], references: [id])
  cart           Cart          @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  @@unique([furniture_item_id, cart_id])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(100)

  FurnitureItem FurnitureItem[]
}

model FurnitureItem {
  id             Int        @id @default(autoincrement())
  name           String     @db.VarChar(255)
  description    String?    @db.Text
  price          Decimal    @db.Decimal(10, 2)
  stock_quantity Int
  model_3d_url   String?
  image_urls     String[]
  total_sales    Int        @default(0)
  color          String?    @db.VarChar(50)
  dimension      String?    @db.VarChar(100)
  weight         Decimal?   @db.Decimal(10, 2)
  category_id    Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  CartItem       CartItem[]
  OrderItem      OrderItem[]
  reviews        Review[]

  Category Category @relation(fields: [category_id], references: [id])
}

model Order {
  id            Int           @id @default(autoincrement())
  order_status  ORDERSTATUS
  total_amount  Decimal       @db.Decimal(10, 2)
  customer_id   Int
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  order_address OrderAddress?

  customer Customer @relation(fields: [customer_id], references: [id])
  orderItems OrderItem []
  payment  Payment?
}

model OrderItem {
  id                Int      @id @default(autoincrement())
  quantity          Int
  furniture_item_id Int
  order_id          Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  furniture_item FurnitureItem @relation(fields: [furniture_item_id], references: [id])
  order           Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  @@unique([furniture_item_id, order_id])
}

model OrderAddress {
  id                    Int     @id @default(autoincrement())
  receiver_name         String? @db.VarChar(100)
  receiver_phone_number String? @db.VarChar(20)
  address               String  @db.VarChar(255)
  postal_code           String  @db.VarChar(20)
  city                  String  @db.VarChar(100)
  order_id              Int     @unique

  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model Payment {
  id             Int      @id @default(autoincrement())
  amount         Decimal  @db.Decimal(10, 2)
  payment_method String   @db.VarChar(50)
  created_at     DateTime @default(now())
  order_id       Int      @unique
  customer_id    Int

  order    Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@unique([order_id, customer_id])
}

model Review {
  id           Int      @id @default(autoincrement())
  rating       Decimal  @db.Decimal(2, 1)
  comment      String?
  created_at   DateTime @default(now())
  customer_id  Int
  furniture_id Int

  customer  Customer      @relation(fields: [customer_id], references: [id])
  furniture FurnitureItem @relation(fields: [furniture_id], references: [id])
}

// Enums
enum Role {
  USER
  ADMIN
}

enum ORDERSTATUS {
  PENDING
  DELIVERED
  CANCELLED
}

enum tokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

